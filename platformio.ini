; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = ESP32 Sveltekit Template
data_dir = data
extra_configs = 
	mah_settings.ini
	features.ini
default_envs = m5stamp-s3

[env]
; upload_port = /dev/cu.SLAB_USBtoUART
upload_port = /dev/cu.usbmodem11301
framework = arduino
;platform = espressif32 @ 6.8.1
platform = https://github.com/pioarduino/platform-espressif32/releases/download/51.03.04/platform-espressif32.zip
build_type = debug
debug_tool = esp-builtin
debug_init_break = tbreak app_main
debug_speed = 10000
build_flags = 
    ; -D ARDUINO_ARCH_ESP32 ; not defined anymore in Arduino3
    -DCONFIG_ESP_HTTPS_SERVER_ENABLE
	${factory_settings.build_flags}
	${features.build_flags}
    ; -D ARDUINO_ARCH_ESP32
    -D BUILD_TARGET=\"$PIOENV\"
    -D APP_NAME=\"ESP32-Sveltekit\" ; Must only contain characters from [a-zA-Z0-9-_] as this is converted into a filename
    -D APP_VERSION=\"0.6.3\" ; semver compatible version string

    ; Move all networking stuff to the protocol core 0 and leave business logic on application core 1
    -D ESP32SVELTEKIT_RUNNING_CORE=0

    ; Uncomment EMBED_WWW to embed the WWW data in the firmware binary
    -D EMBED_WWW

    ; Uncomment to configure Cross-Origin Resource Sharing
    ; -D ENABLE_CORS
    ; -D CORS_ORIGIN=\"*\"

    ; Uncomment to enable informations from ESP32-Sveltekit in Serial Monitor
    -D SERIAL_INFO
    
    ; D E B U G   B U I L D F L A G S
    ; ===============================
    ; These build flags are only for debugging purposes and should not be used in production

	; Uncomment to show log messages from the ESP Arduino Core and ESP32-SvelteKit
	-D CORE_DEBUG_LEVEL=5

    ; Serve config files from flash and access at /config/filename.json
    -D SERVE_CONFIG_FILES

    ; Uncomment to use JSON instead of MessagePack for event messages. Default is MessagePack.
    -D EVENT_USE_JSON=1 
    
lib_compat_mode = strict

; Uncomment to include the a Root CA SSL Certificate Bundle for all SSL needs
; Needs -D FT_DOWNLOAD_FIRMWARE=1 and -D FT_NTP=1
board_build.embed_files = src/certs/x509_crt_bundle.bin
; Source for SSL Cert Store can bei either downloaded from Mozilla with 'mozilla' ('https://curl.se/ca/cacert.pem')
; or from a curated Adafruit repository with 'adafruit' (https://raw.githubusercontent.com/adafruit/certificates/main/data/roots.pem)
; or complied from a 'folder' full of *.pem / *.dem files stored in the ./ssl_certs folder
board_ssl_cert_source = adafruit

monitor_speed = 115200
monitor_filters = 
	esp32_exception_decoder
	default
	colorize
    ; log2file
board_build.filesystem = littlefs
extra_scripts = 
    pre:scripts/build_interface.py
    pre:scripts/generate_cert_bundle.py
    scripts/rename_fw.py
lib_deps = 
	ArduinoJson@>=7.0.0
    https://github.com/mhaberler/PsychicMqttClient.git#main
	hoeken/PsychicHttp@^1.2.0
	bblanchon/ArduinoTrace@^1.2.0
	plageoj/UrlEncode@^1.0.1
	https://github.com/mlesniew/PicoMQTT.git


[env:esp32-c3-devkitm-1]
board = esp32-c3-devkitm-1
board_build.mcu = esp32c3
; Uncomment min_spiffs.csv setting if using EMBED_WWW with ESP32
board_build.partitions = min_spiffs.csv
;board_upload.before_reset = usb_reset
build_flags = 
    ${env.build_flags}
    -DBUILTIN_RGBLED_PIN=8

[env:esp32-s3-devkitc-1]
board = esp32-s3-devkitc-1-32MB-8MB
board_build.mcu = esp32s3
board_build.partitions = large_littlefs_32MB.csv ; default_8MB.csv ; 
; board_upload.before_reset = usb_reset
build_flags = 
   ${env.build_flags}
    -DBUILTIN_RGBLED_PIN=38

[env:m5stamp-s3]
board = m5stack-stamps3
build_flags = 
   ${env.build_flags}
    -DBUILTIN_RGBLED_PIN=21


[env:m5stamp-c3u]
board = esp32-c3-devkitm-1
board_build.mcu = esp32c3
board_build.partitions = huge_app.csv
board_build.variant = esp32c3
board_build.f_cpu = 160000000L
board_build.f_flash = 80000000L
board_build.flash_mode = dio
board_build.arduino.ldscript = esp32c3_out.ld
build_unflags = 
	-DARDUINO_ESP32_DEV
build_flags = 
   ${env.build_flags}
    -DBUILTIN_RGBLED_PIN=21
debug_tool = esp-builtin
debug_init_break = tbreak app_main
debug_speed = 10000


[env:esp32-c6-pico] ; waveshare
platform = espressif32
board = esp32-c6-pico
board_build.partitions = huge_app.csv
build_flags = 
   ${env.build_flags}
    -DBUILTIN_RGBLED_PIN=8
    ; -DARDUINO_USB_MODE=1

debug_tool = esp-builtin
debug_init_break = tbreak app_main
debug_speed = 10000

[env:esp32dev]
; Works for nodemcu-32s, devkit-v1 boards and probably others. You can change the pin defines below if needed.
board = esp32dev
board_build.partitions = min_spiffs.csv
build_flags =
    ${env.build_flags}
    -D LED_BUILTIN=2
    -D KEY_BUILTIN=0

